import { InternalApi } from './internal/internal-api';
import { Listener } from './shared/internal/util/event-emitter';
import { IndividualUiState } from './model/individualui_state';
import { GeneralEventType } from "./internal/module/general-module";
import { ActiveIndividualUiView } from "./model/individualui_component";
/**
 * Listener called whenever the UI state changes.
 * @param uistate The new UI state.
 */
export type UiStateChangeListener = (uistate: IndividualUiState) => void;
/**
 * Listener called whenever the active individual UI view changes.
 *
 * NOTE: This listener is also triggered when the view in individual UI changes, but the UI isn't
 * visible, for example, because it's collapsed.
 *
 * @param uicomponent The new individual UI component.
 */
export type UiActiveIndividualUiViewChangeListener = (uicomponent: ActiveIndividualUiView) => void;
/**
 * This class allows you to control the UI state and the Unblu individual UI.
 */
export declare class UnbluUiApi {
    private internalApi;
    private internalListeners;
    private eventEmitter;
    /**
     * Event emitted every time the state of the individual UI is changed.
     *
     * @event uiStateChange
     * @see {@link on} for listener registration
     * @see {@link UiStateChangeListener}
     */
    static readonly UI_STATE_CHANGE: 'uiStateChange';
    /**
     * Event emitted every time individual UI view changes.
     *
     * NOTE: This event is also triggered when an individual UI view change happens, but the UI isn't
     * visible, for example, because it's collapsed.
     *
     * @event uiActiveIndividualUiViewChange
     * @see {@link on} for listener registration
     * @see {@link UiActiveIndividualUiViewChangeListener}
     */
    static readonly UI_ACTIVE_INDIVIDUAL_UI_VIEW_CHANGE: 'uiActiveIndividualUiViewChange';
    /**
     * @hidden
     */
    constructor(internalApi: InternalApi);
    /**
     * Registers an event listener for the given event.
     * @param event The uistateChange event.
     * @param listener The listener to be called.
     * @see {@link UI_STATE_CHANGE}
     */
    on(event: typeof UnbluUiApi.UI_STATE_CHANGE, listener: UiStateChangeListener): void;
    /**
     * Registers an event listener for the given event.
     * @param event The uiOverviewOpen event.
     * @param listener The listener to be called.
     * @see {@link UI_ACTIVE_INDIVIDUAL_UI_VIEW_CHANGE}
     */
    on(event: typeof UnbluUiApi.UI_ACTIVE_INDIVIDUAL_UI_VIEW_CHANGE, listener: UiActiveIndividualUiViewChangeListener): void;
    /**
     * Removes a previously registered listener
     * @param event The event to unregister from.
     * @param listener The listener to remove.
     */
    off(event: GeneralEventType, listener: Listener): boolean;
    private onInternal;
    private offInternal;
    /**
     * Opens the individual UI if it is collapsed and collapses it if it is open.
     */
    toggleIndividualUi(): Promise<void>;
    /**
     * Navigates the individual UI to the PIN entry UI.
     *
     * **NOTE:** calling this method will NOT automatically open the Unblu UI if it is collapsed. Use {@link openIndividualUi} if this is needed.
     */
    openPinEntryUi(): Promise<void>;
    /**
     * Navigates the individual UI to the overview UI.
     *
     * <p>
     *     Be aware that this method will force to close any currently open conversation. Depending on the conversation's configuration and the activity in it a prompt may be displayed that has to be accepted by the visitor before the navigation to the overview can happen.
     * </p>
     *
     * **NOTE:** calling this method will NOT automatically open the Unblu UI if it is collapsed. Use {@link openIndividualUi} if this is needed.
     */
    openOverviewUi(): Promise<void>;
    /**
     * Pop-out the individual UI into a separate window.
     *
     * **NOTE:** this has to be called in a click-event in order to be able to open the pop-up window without being blocked by the browser!
     */
    popoutIndividualUi(): Promise<void>;
    /**
     * Pop-in the individual UI when it is in [POPPED_OUT]{@link IndividualUiState.POPPED_OUT} state.
     *
     * The pop-out window will automatically close and the individual UI will be displayed in the original window again.
     */
    popinIndividualUi(): Promise<void>;
    /**
     * Maximize the individual UI - Does nothing if it is already maximized or popped out.
     */
    maximizeIndividualUi(): Promise<void>;
    /**
     * Minimize the individual UI - Does nothing if it is already minimized.
     */
    minimizeIndividualUi(): Promise<void>;
    /**
     * Opens the individual UI if it was collapsed. - Does nothing if it was already open.
     */
    openIndividualUi(): Promise<void>;
    /**
     * Collapses the individual UI if it was open. - Does nothing if it was already collapsed.
     */
    collapseIndividualUi(): Promise<void>;
    /**
     * Get the state of the individual UI.
     * @return A promise that resolves to the {@link IndividualUiState} of the individual UI.
     */
    getIndividualUiState(): Promise<IndividualUiState>;
    /**
     * Get the active individual UI view.
     *
     * NOTE: The view being active doesn't necessarily mean it's visible to the user. The UI as a whole may be
     * collapsed, for instance.
     *
     * @return A promise that resolves to the {@link ActiveIndividualUiView} of the individual UI.
     * @see {@link getIndividualUiState}
     */
    getActiveIndividualUiView(): Promise<ActiveIndividualUiView>;
    private requireUpgrade;
    private onUpgraded;
}

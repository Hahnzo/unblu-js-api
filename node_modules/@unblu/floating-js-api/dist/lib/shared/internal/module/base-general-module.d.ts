import { ApiBridge } from "../api-bridge";
import { InternalModule } from "./module";
import { NewConversationInterceptor } from "../../new-conversation-interceptor";
import { ConversationType } from "../../model/conversation-type";
import { PersonInfo } from "../../model/person-info";
import { ConversationInfo } from "../../model/conversation-info";
import { NewConversationRecipient } from "../../model/new-conversation-recipient";
export type BaseGeneralEventType = 'activeConversationChange' | 'conversationsChange' | 'notificationCountChange' | 'personChange' | 'personActivity';
export declare enum BaseGeneralFunction {
    startConversation = "startConversation",
    setNewConversationInterceptor = "setNewConversationInterceptor",
    joinConversation = "joinConversation",
    openConversation = "openConversation",
    getActiveConversation = "getActiveConversation",
    getConversations = "getConversations",
    getNotificationCount = "getNotificationCount",
    getPersonInfo = "getPersonInfo",
    setPersonNickname = "setPersonNickname",
    addPersonLabel = "addPersonLabel",
    removePersonLabel = "removePersonLabel"
}
export declare class BaseGeneralModule<T extends string | BaseGeneralFunction, E extends BaseGeneralEventType | string> extends InternalModule<BaseGeneralFunction | T, E> {
    constructor(bridge: ApiBridge);
    startConversation(type: ConversationType, visitorName?: string, visitorData?: string, recipient?: NewConversationRecipient): Promise<string>;
    setNewConversationInterceptor(callback: NewConversationInterceptor): Promise<void>;
    joinConversation(pin: string, visitorName?: string): Promise<string>;
    openConversation(conversationId: string): Promise<void>;
    getActiveConversation(): Promise<string | null>;
    getConversations(): Promise<ConversationInfo[]>;
    getNotificationCount(): Promise<number>;
    getPersonInfo(): Promise<PersonInfo>;
    setPersonNickname(nickname: string): Promise<void>;
    addPersonLabel(labelName: string): Promise<void>;
    removePersonLabel(labelName: string): Promise<void>;
}

import { InitializedUnbluElement } from "./initialized-unblu-element";
import { Configuration } from "../model/configuration";
import { UnbluFloatingApi } from "./unblu-floating-api";
export declare enum IntegrationType {
    embedded = "embedded",
    floating = "floating"
}
declare enum EntryPoint {
    siteIntegrationGreedyMain = "SiteIntegrationGreedyMain",
    siteIntegrationLazyMain = "SiteIntegrationLazyMain",
    siteEmbeddedMain = "SiteEmbeddedMain"
}
/**
 * Internal type definition of the unblu object.
 */
export interface UnbluObject {
    floating?: UnbluFloatingApi;
    /**
     * internal unblu field
     * @hidden
     */
    APIKEY?: string;
    /**
     * internal unblu field
     * @hidden
     */
    SERVER?: string;
    /**
     * internal unblu field
     * @hidden
     */
    l?: string;
    /**
     * internal unblu field
     * @hidden
     */
    entryPoint?: EntryPoint;
    /**
     * internal unblu field
     * @hidden
     */
    globalPrefix?: string;
}
export declare class UnbluUtil {
    static loadScript(uri: string, timeout: number): Promise<void>;
    static getNamedArea(): string | undefined;
    static setNamedArea(namedArea: string): void;
    static removeNamedArea(): void;
    static setLocale(locale: string): void;
    static loginWithSecureToken(serverUrl: string, apiKey: string, entryPath: string, accessToken: string): Promise<void>;
    static isAuthenticated(serverUrl: string, entryPath: string): Promise<boolean>;
    static logout(serverUrl: string, entryPath: string): Promise<void>;
    static isUnbluLoaded(integrationType: IntegrationType): boolean;
    static generateConfigurationFromLoadedUnblu(): Configuration;
    private static entryPointMatches;
    static getUnbluObject(): UnbluObject;
    static createUnbluObject(): UnbluObject;
    static getOrCreateUnbluObject(): UnbluObject;
    static deinitializeFloatingIfNeeded(): Promise<void>;
    static deinitializeEmbeddedIfNeeded(excludedAppElement?: InitializedUnbluElement): Promise<void>;
    static sanitizeParameter(param: string): string;
}
export {};

import { ConversationType } from "./model/conversation-type";
import { NewConversationRecipient } from "./model/new-conversation-recipient";
import { NewConversationInterceptorResult } from "./model/new-conversation-interceptor-result";
/**
 * Interceptor function which is called every time a new conversation is started from the UI or JS API.
 *
 * Starting the conversation is deferred until the Promise returned by this interceptor resolves:
 * - If the interceptor rejects the Promise, starting the conversation will be cancelled.
 * - If the interceptor resolves the Promise with a String, the value of the String will be used and set as "visitorData" for the conversation created.
 * - If the interceptor resolves the Promise with a {@link NewConversationInterceptorResult}, the values from it will be used for the "visitorData" and the "recipient" for the conversation created.
 * - If the resolved value is undefined, the value passed into the {@link UnbluApi.startConversation} method will be used.
 * - If the resolved value is set to null, any value passed into {@link UnbluApi.startConversation} will be discarded.
 * - If the resolved value is neither a {@link NewConversationInterceptorResult}, nor a String, nor undefined, the conversation is started without any visitorData.
 * - If the interceptor resolves the Promise with something other than a {@link NewConversationInterceptorResult} or a String, the conversation is started without any visitorData.
 *
 * Any values of {@link NewConversationInterceptorResult} that are undefined are replaced by the corresponding values passed to {@link UnbluApi.startConversation}.
 * Any values of {@link NewConversationInterceptorResult} that are null discard the corresponding values passed to {@link UnbluApi.startConversation}.
 *
 * @param conversationType The type of the conversation being started.
 * @param visitorData Optional visitorData, only present if passed to the {@link UnbluApi.startConversation} method
 * @param recipient Optional recipient, only present if passed to the {@link UnbluApi.startConversation} method
 * @return A Promise deferring the start of the conversation until it resolves.
 */
export type NewConversationInterceptor = (conversationType: ConversationType, visitorData?: String, recipient?: NewConversationRecipient) => Promise<String | NewConversationInterceptorResult>;
